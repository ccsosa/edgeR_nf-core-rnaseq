/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/rnaseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Input options
    input                     = '/scratch/bis_klpoe/chsos/data/sample_files/run1.csv'

    // References
    fasta                     = '/scratch/bis_klpoe/chsos/data/iwgsc_refseqv1.0_all_chromosomes/161010_Chinese_Spring_v1.0_pseudomolecules.fasta'
   	gtf						  = '/scratch/bis_klpoe/chsos/data/iwgsc_refseqv1.1_genes_2017July06/IWGSC_v1.1_HC_20170706.gtf'
	transcript_fasta		  = '/scratch/bis_klpoe/chsos/data/iwgsc_refseqv1.1_genes_2017July06/IWGSC_v1.1_HC_20170706_transcripts.fasta'

    // UMI handling
    with_umi                   = false
    skip_umi_extract           = false
    umitools_extract_method    = 'string'
    umitools_grouping_method   = 'directional'
    umitools_dedup_stats       = false
    umitools_bc_pattern        = null
    umitools_bc_pattern2       = null
    umitools_umi_separator     = null
    umi_discard_read           = null
    save_umi_intermeds         = false

    // Trimming
    //min_trimmed_reads        = 10000
    clip_r1                    = 0
    clip_r2                    = 0
    three_prime_clip_r1        = null
    three_prime_clip_r2        = null
    trim_nextseq               = 0
    save_trimmed               = false
    skip_trimming              = false

    // BBSplit genome filtering
    bbsplit_fasta_list         = null
    save_bbsplit_reads         = false
    skip_bbsplit               = true

    // Ribosomal RNA removal
    remove_ribo_rna            = false
    save_non_ribo_reads        = false
    ribo_database_manifest     = "${projectDir}/assets/rrna-db-defaults.txt"

    // Alignment
    pseudo_aligner             = 'salmon'
    seq_center                 = null
    bam_csi_index              = false
    star_ignore_sjdbgtf        = false
    salmon_quant_libtype       = null
    stringtie_ignore_gtf       = false
    min_mapped_reads           = 5
    save_merged_fastq          = false
    save_unaligned             = false
    save_align_intermeds       = false
    skip_markduplicates        = false
    skip_alignment             = true
	salmon_index			   = '/scratch/bis_klpoe/chsos/data/salmon_index/INDEX/transcripts_index'
    // QC
    skip_qc                    = false
    skip_bigwig                = false
    skip_stringtie             = false
    skip_fastqc                = false
    skip_preseq                = false
    skip_dupradar              = false
    skip_qualimap              = false
    skip_rseqc                 = false
    skip_biotype_qc            = false
    skip_deseq2_qc             = true
    skip_multiqc               = false
    deseq2_vst                 = false

    // Boilerplate options
    outdir                     = '/scratch/bis_klpoe/chsos/analysis'
	//projectDir               = '/scratch/bis_klpoe/chsos/analysis/projectDir'
    //workDir                    = '/scratch/bis_klpoe/chsos/analysis/work'
	multiqc_config             = null
    multiqc_title              = null
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    igenomes_ignore            = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes'
    enable_conda               = false

    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '160.GB'
    max_cpus                   = 13
    max_time                   = '240.h'
}

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/rnaseq custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/rnaseq.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/rnaseq profiles: ${params.custom_config_base}/pipeline/rnaseq.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
		singularity.pullTimeout = '200 min'
     }
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/rnaseq'
    author          = 'Harshil Patel, Phil Ewels, Rickard HammarÃ©n'
    homePage        = 'https://github.com/nf-core/rnaseq'
    description     = 'RNA sequencing analysis pipeline for gene/isoform quantification and extensive quality control.'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '3.9'
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit

// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

process {

  penv = 'serial'
  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 10.GB * task.attempt, 'memory' ) }
  clusterOptions = { "-l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G" }
  // container = '/group/transreg/niman/nfcore_atac/nfcore-atacseq-1.2.1.img.pulling.1622992676541'


  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    penv = 'serial'
    cpus = { check_max( 2, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G" }
  }

  withLabel:process_medium {
    penv = 'serial'
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 54.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G" }
  }

  withLabel:process_high {
    penv = 'serial'
    cpus = { check_max( 12, 'cpus' ) }
    memory = { check_max( 76.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=${task.memory.toGiga().intdiv(task.cpus)}G" }
  }

  withLabel:error_ignore {
    errorStrategy = 'ignore'
  }

  withName:get_software_versions {
    cache = false
  }


  withName: 'CAT_FASTQ' {
    penv = 'serial'
    cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=20G -pe serial 6" }
  }
  
    withName: 'FASTQC' {
    penv = 'serial'
    cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=20G -pe serial 4" }
  }
  
  withName:'.*:FASTQC_UMITOOLS_TRIMGALORE:TRIMGALORE' {
    penv = 'serial'
    cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=10G -pe serial 6" }
  }

  withName:'.*:QUANTIFY_SALMON:SALMON_QUANT' {
    executor = 'sge'
    //ext.args   = '--libType A'
    penv = 'serial'
    cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=20G -pe serial 4" }
	
  }

  withName:'.*:QUANTIFY_SALMON:SALMON_TX2GENE' {
    executor = 'sge'
    //penv = 'serial'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=30G -pe serial 1" }
  }
  
  withName:'.*:QUANTIFY_SALMON:SALMON_TXIMPORT' {
    //penv = 'serial'
    executor = 'sge'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=30G -pe serial 1" }
	
  }
  
  withName:'.*:QUANTIFY_SALMON:SALMON_SE_.*' {
    //penv = 'serial'
    executor = 'sge'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    clusterOptions = { "-l h_vmem=30G -pe serial 1" }
  }  
  
//NOT USED OPTIONS   
  //withName:'.*:FASTQC_UMITOOLS_TRIMGALORE:UMITOOLS_EXTRACT' {
    //penv = 'serial'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    //clusterOptions = { "-l h_vmem=9G" }
  //}

  //withName:'BBMAP_BBSPLIT' {
    //penv = 'serial'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    //clusterOptions = { "-l h_vmem=9G" }
  //}
  
  //withName:'SORTMERNA' {
	//ext.args   = '--num_alignments 1 --fastx -v'
    //penv = 'serial'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    //clusterOptions = { "-l h_vmem=9G" }
  //}
  
  //withName:'SALMON_INDEX' {
    //executor = 'sge'
    //penv = 'serial'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    //clusterOptions = { "-l h_vmem=25G -pe serial 6" }
  //}
      
  //withName:'NFCORE_RNASEQ:RNASEQ:DESEQ2_QC_SALMON' {
    //penv = 'serial'
    //executor = 'sge'
    //cpus = { check_max( 6, 'cpus' ) }
    //memory = { check_max( 36.GB * task.attempt, 'memory' ) }
    //clusterOptions = { "-l h_vmem=20G" }
  //}  
  }
